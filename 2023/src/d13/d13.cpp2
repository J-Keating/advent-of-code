#include "d13-2.h2"

d13: namespace = {

    DAY_NUM: const int = 13;
    writeln: (msg: _) = std::cout << msg << std::endl;

    load_file: (filename: std::string) -> std::vector<std::vector<char>> =
    {
        input_file: std::ifstream = (filename);
        input_file.is_open();    // Do nothing but convnce the compiler that fb is used
        ret: std::vector<std::vector<char>> = ();
        line: std::string = ();
        while (std::getline(input_file, line)) {
            chars: std::vector<char> = (line.begin(), line.end());
            ret.push_back(chars);
        }
        return ret;
    }

    print: (lines: std::vector<std::vector<char>>) = {
        std::for_each(lines.begin(), lines.end(), :(row: std::vector<char>) -> void = {
            std::for_each(row.begin(), row.end(), :(c: char) -> void = {
                std::cout << c;
            });
            std::cout << std::endl;
        });
    }

    get_next_board: (inout boards: std::vector<std::vector<char>>) -> std::vector<std::vector<char>> = {
        ret: std::vector<std::vector<char>> = ();
        while boards.ssize() > 0 && boards[0].ssize() > 0 {
            ret.push_back(boards[0]);
            boards.erase(boards.begin());
        }
        if boards.ssize() > 0 {
            boards.erase(boards.begin());
        }
        return ret;
    }

    find_vertical_symetry_at: (board: std::vector<std::vector<char>>, col: int) -> bool = {
        l := col;
        r := col + 1;
        while l >= 0 && r < board[0].ssize() {
            for std::views::iota(0, board.ssize()) do (row) {
                if board[row][l] != board[row][r] {
                    return false;
                }
            }
            l -= 1;
            r += 1;
        }
        return true;
    }

    find_vertical_symmetry: (board: std::vector<std::vector<char>>) -> int = {
        for std::views::iota(0, board[0].ssize()-1) do (col) {
            if find_vertical_symetry_at(board, col) {
                return col + 1;
            }
        }
        return -1;
    }

    find_horizontal_symetry_at: (board: std::vector<std::vector<char>>, row: int) -> bool = {
        t := row;
        b := row + 1;
        while t >= 0 && b < board.ssize() {
            for std::views::iota(0, board[0].ssize()) do (col) {
                if board[t][col] != board[b][col] {
                    return false;
                }
            }
            t -= 1;
            b += 1;
        }
        return true;
    }

    find_horizontal_symmetry: (board: std::vector<std::vector<char>>) -> int = {
        for std::views::iota(0, board.ssize()-1) do (row) {
            if find_horizontal_symetry_at(board, row) {
                return row + 1;
            }
        }
        return -1;
    }

    part1: () = {
        boards := load_file(std::format("src/d{}/data.txt", DAY_NUM));
        board_index := 1;
        total := 0;
        while (!boards.empty()) {
            board: std::vector<std::vector<char>> = boards&*.get_next_board();
            writeln(std::format("{}: {}x{}", board_index, board.ssize(), board[0].ssize()));
            //board.print();
            symetry := find_vertical_symmetry(board);
            if symetry >= 0 {
                writeln(std::format("Vertical symetry at {}", symetry));
                total += symetry;
            } else {
                writeln("No Vertical symetry");
            }
            symetry = find_horizontal_symmetry(board);
            if symetry >= 0 {
                writeln(std::format("Horizontal symetry at {}", symetry));
                total += (100 * symetry);
            } else {
                writeln("No Horizontal symetry");
            }
            board_index += 1;
        }
        writeln(std::format("Part {}: {}", 1, total));
    }

    part2: () = {
        boards := load_file(std::format("src/d{}/data.txt", DAY_NUM));
        writeln(std::format("Part {}: {}", 2, boards.ssize()));
    }

    run: () = {
        writeln(std::format("Day {}", DAY_NUM));
        part1();
        part2();
    }
    // Part1: 
    // Part2: 
}


