#include "d19-f.h2"

d19: namespace = {

    DAY_NUM: const int = 19;
    writeln: (msg: _) = std::cout << msg << std::endl;

    PartMember: @enum type = {
        x;
        m;
        a;
        s;

        parse: (str: std::string) -> PartMember = {
            if (str == "x") {
                return x;
            } else if (str == "m") {
                return m;
            } else if (str == "a") {
                return a;
            } else if (str == "s") {
                return s;
            } else {
                assert(false, "Invalid PartMember");
            }
            return x;
        }
    }

    Part: @struct type = {
        x: int = 0;
        m: int = 0;
        a: int = 0;
        s: int = 0;

        // constructor: (inout this, x_in: int, m_in: int, a_in: int, s_in: int) = {
        //     this.x = x_in;
        //     this.m = m_in;
        //     this.a = a_in;
        //     this.s = s_in;
        // }

        get_member: (this, member: PartMember) -> int = {
            if (member == PartMember::x) {
                return this.x;
            } else if (member == PartMember::m) {
                return this.m;
            } else if (member == PartMember::a) {
                return this.a;
            } else if (member == PartMember::s) {
                return this.s;
            } else {
                assert(false, "Invalid PartMember");
            }
            return 0;
        }

        set_member: (inout this, member: PartMember, value: int) = {
            if (member == PartMember::x) {
                this.x = value;
            } else if (member == PartMember::m) {
                this.m = value;
            } else if (member == PartMember::a) {
                this.a = value;
            } else if (member == PartMember::s) {
                this.s = value;
            } else {
                assert(false, "Invalid PartMember");
            }
        }

        sum: (this) -> int = {
            return this.x + this.m + this.a + this.s;
        }
    }

    RuleTest: @enum type = {
        gt;
        lt;

        parse: (str: std::string) -> RuleTest = {
            if (str == ">") {
                return gt;
            } else if (str == "<") {
                return lt;
            } else {
                assert(false, "Invalid RuleTest");
            }
            return gt;
        }

        run_test: (this, value: int, test_value: int) -> bool = {
            if (this == RuleTest::gt) {
                return value > test_value;
            } else if (this == RuleTest::lt) {
                return value < test_value;
            } else {
                assert(false, "Invalid RuleTest");
            }
            return false;
        }
    }

    RulePassResult: @struct type = {
        next_workflow: std::string = "";
        accepted: bool = false;

        parse: (str: std::string) -> RulePassResult = {
            if (str == "A") {
                return RulePassResult("", true);
            } else if (str == "R") {
                return RulePassResult("", false);
            }
            return RulePassResult(str, false);
        }
    }

    Rule: @struct type = {
        part_member: PartMember = PartMember::x;
        test: RuleTest = RuleTest::gt;
        value: int = 0;
        pass_result: RulePassResult = RulePassResult("", false);

        make: (part_member_in: std::string, test_in: std::string, value_in: std::string, pass_result_in: std::string) -> Rule = {
            rule: Rule = ();
            rule.part_member = PartMember::parse(part_member_in);
            rule.test = RuleTest::parse(test_in);
            rule.value = std::stoi(value_in);
            rule.pass_result = RulePassResult::parse(pass_result_in);
            return rule;
        }

        run_on_part: (this, part: Part, inout result: RulePassResult) -> bool = {
            part_value := part.get_member(this.part_member);
            if (this.test.run_test(part_value, this.value)) {
                result = this.pass_result;
                return true;
            }
            return false;
        }
    }

    WorkFlow: @struct type = {
        name: std::string = "";
        rules: std::vector<Rule> = ();
        final_result: RulePassResult;

        // operator=: (out this, name_in: std::string) = {
        //     this.name = name_in;
        // }

        // operator=: (out this, name_in: std::string, rules_in: std::vector<Rule>, final_result_in: RulePassResult) = {
        //     this.name = name_in;
        //     this.rules = rules_in;
        //     this.final_result = final_result_in;
        // }

        run_on_part: (this, part: Part) -> RulePassResult = {
            result := RulePassResult("", false);
            for this.rules do (rule) {
                if (rule.run_on_part(part, result&*)) {
                    return result;
                }
            }
            return this.final_result;
        }
    }

    load_file: (filename: std::string) -> std::pair<std::vector<WorkFlow>, std::vector<Part>> =
    {
        input_file: std::ifstream = (filename);
        input_file.is_open();    // Do nothing but convnce the compiler that fb is used

        // WorkFlows
        workflows: std::vector<WorkFlow> = ();
        workflow_regex: const std::regex = (R"((.+)\{(.+)\})");
        workflow_matches: std::smatch = ();

        line: std::string = ();
        while (std::getline(input_file, line)) {
            if (line == "") {
                break;
            }
            std::regex_search(line, workflow_matches, workflow_regex);
            assert(workflow_matches.ssize() == 3);
            workflow_name: std::string = workflow_matches[1];
            workflow := WorkFlow(workflow_name);
            rules_str: std::string = workflow_matches[2];

            rules_stream: std::stringstream = (rules_str);
            rules_stream.gcount();    // Do nothing but convnce the compiler that this is used

            rule_string: std::string = ();
            while (std::getline(rules_stream, rule_string, ',')) {
                rule_regex: const std::regex = (R"(^(\w+)([<>])(\d+):(\w+)|(\w+)$)");
                rule_matches: std::smatch = ();

                std::regex_search(rule_string, rule_matches, rule_regex);
                assert(rule_matches.ssize() == 6);
                if (rule_matches[5].length() == 0) {
                    // member := PartMember::parse(rule_matches[1]);
                    // rule_test := RuleTest::parse(rule_matches[2]);
                    // value := std::stoi(rule_matches[3]);
                    // rule_pass_result := RulePassResult::parse(rule_matches[4]);

                    //workflow.rules.push_back(Rule(member, rule_test, value, rule_pass_result));
                    rule := Rule::make(rule_matches[1], rule_matches[2], rule_matches[3], rule_matches[4]);
                    workflow.rules.push_back(rule);
                }
                else {
                    workflow.final_result = RulePassResult::parse(rule_matches[5]);
                }
            }
            workflows.push_back(workflow);
        }
        // Parts
        parts: std::vector<Part> = ();
        while (std::getline(input_file, line)) {
            part_regex: const std::regex = (R"(^\{x=(\d+),m=(\d+),a=(\d+),s=(\d+)\}$)");
            part_matches: std::smatch = ();

            std::regex_search(line, part_matches, part_regex);
            assert(part_matches.ssize() == 5);
            x := std::stoi(part_matches[1]);
            m := std::stoi(part_matches[2]);
            a := std::stoi(part_matches[3]);
            s := std::stoi(part_matches[4]);

            parts.push_back(Part(x, m, a, s));
        }

        return make_pair(workflows, parts);
    }

    part1: () = {
        input := load_file(std::format("src/d{}/data.txt", DAY_NUM));
        workflow_array := input.first;
        parts := input.second;

        workflow_map: std::map<std::string, WorkFlow> = ();
        for workflow_array do (workflow) {
            workflow_map[workflow.name] = workflow;
        }

        total := 0;
        for parts do (part) {
            workflow_result := RulePassResult("in", false);
            while (!workflow_result.next_workflow.empty()) {
                workflow := workflow_map[workflow_result.next_workflow];
                workflow_result = workflow.run_on_part(part);
            }
            //writeln(std::format(" {}: {}", workflow_result.accepted, part.sum()));
            if (workflow_result.accepted) {
                total += part.sum();
            }
        }

        writeln(std::format("Part {}: {}", 1, total));
    }

    PartRange: @struct type = {
        min: Part = Part(1, 1, 1, 1);
        max: Part = Part(4001, 4001, 4001, 4001);

        is_valid: (this) -> bool = {
            return this.min.x < this.max.x && this.min.m < this.max.m && this.min.a < this.max.a && this.min.s < this.max.s;
        }

        split_by_rule: (this, rule: Rule, out pass_result_and_range_optional_out: std::optional<std::pair<RulePassResult, PartRange>>, out fail_range_optional_out: std::optional<PartRange>) = {
            fail_range := PartRange(this.min, this.max);
            pass_range := PartRange(this.min, this.max);

            min_member_value := this.min.get_member(rule.part_member);
            max_member_value := this.max.get_member(rule.part_member);

            if (rule.test == RuleTest::gt) {
                fail_range.max.set_member(rule.part_member, std::min(max_member_value, rule.value + 1));
                pass_range.min.set_member(rule.part_member, std::max(min_member_value, rule.value + 1));
            }
            else if (rule.test == RuleTest::lt) {
                pass_range.max.set_member(rule.part_member, std::min(max_member_value, rule.value));
                fail_range.min.set_member(rule.part_member, std::max(min_member_value, rule.value));
            }

            pass_result_and_range_optional_out = std::nullopt;
            if (pass_range.is_valid()) {
                pass_result_and_range_optional_out = std::make_pair(rule.pass_result, pass_range);
            }

            fail_range_optional_out = std::nullopt;
            if (fail_range.is_valid()) {
                fail_range_optional_out = fail_range;
            }
        }

        combinations: (this) -> longlong = {
            ret: longlong = (this.max.x as longlong - this.min.x as longlong) * (this.max.m as longlong - this.min.m as longlong) * (this.max.a as longlong - this.min.a as longlong) * (this.max.s as longlong - this.min.s as longlong);
            assert(ret >= 0);
            return ret;
        }
    }

    test_part_range: () = {

        success: std::optional<std::pair<RulePassResult, PartRange>> = ();
        fail: std::optional<PartRange> = ();
        {
            part_range: PartRange = ();
            rule := Rule::make("x", ">", "10", "A");
            part_range.split_by_rule(rule, success&, fail&);
            assert(success.has_value());
            assert(success.value().first.next_workflow == "");
            assert(success.value().first.accepted == true);
            assert(success.value().second.min.x == 11);
            assert(success.value().second.max.x == 4001);
            assert(fail.has_value());
            assert(fail.value().min.x == 1);
            assert(fail.value().max.x == 11);
        }
        {
            part_range: PartRange = ();
            rule := Rule::make("m", "<", "100", "abcd");
            part_range.split_by_rule(rule, success&, fail&);
            assert(success.has_value());
            assert(success.value().first.next_workflow == "abcd");
            assert(success.value().second.min.m == 1);
            assert(success.value().second.max.m == 100);
            assert(fail.has_value());
            assert(fail.value().min.m == 100);
            assert(fail.value().max.m == 4001);
        }
        {
            part_range: PartRange = ();
            rule := Rule::make("m", "<", "301", "R");
            part_range.split_by_rule(rule, success&, fail&);
            assert(success.has_value());
            assert(success.value().first.next_workflow == "");
            assert(success.value().first.accepted == false);
            assert(success.value().second.min.m == 1);
            assert(success.value().second.max.m == 301);
            assert(fail.has_value());
            assert(fail.value().min.m == 301);
            assert(fail.value().max.m == 4001);
        }
        {
            part_range: PartRange = (Part(1, 1, 1000, 1), Part(4001, 4001, 2001, 4001));
            rule := Rule::make("a", "<", "300", "A");
            part_range.split_by_rule(rule, success&, fail&);
            assert(!success.has_value());
            assert(fail.has_value());
            assert(fail.value().min.a == 1000);
            assert(fail.value().max.a == 2001);

            rule = Rule::make("a", ">", "1999", "R");
            part_range.split_by_rule(rule, success&, fail&);
            assert(success.has_value());
            assert(success.value().first.next_workflow == "");
            assert(success.value().first.accepted == false);
            assert(success.value().second.min.a == 2000);
            assert(success.value().second.max.a == 2001);
            assert(fail.has_value());
            assert(fail.value().min.a == 1000);
            assert(fail.value().max.a == 2000);

            rule = Rule::make("a", ">", "2000", "R");
            part_range.split_by_rule(rule, success&, fail&);
            assert(!success.has_value());
            assert(fail.has_value());
            assert(fail.value().min.a == 1000);
            assert(fail.value().max.a == 2001);

            rule = Rule::make("a", ">", "3000", "A");
            part_range.split_by_rule(rule, success&, fail&);
            assert(!success.has_value());
            assert(fail.has_value());
            assert(fail.value().min.a == 1000);
            assert(fail.value().max.a == 2001);
        }
    }

    count_accepted_parts: (inout workflow_map: std::map<std::string, WorkFlow>, rule_result: RulePassResult, part_range_in: PartRange) -> longlong = {
        total: longlong = 0;
        if (!rule_result.next_workflow.empty()) {
            workflow := workflow_map&*[rule_result.next_workflow];
            part_range_reference: std::optional<PartRange> = part_range_in;
            for workflow.rules do (rule) {
                success: std::optional<std::pair<RulePassResult, PartRange>> = ();
                fail: std::optional<PartRange> = ();
                part_range_reference.value().split_by_rule(rule, success&, fail&);
                if (success.has_value()) {
                    total += count_accepted_parts(workflow_map, success.value().first, success.value().second);
                }
                part_range_reference = fail;
            }
            if (part_range_reference.has_value()) {
                total += count_accepted_parts(workflow_map, workflow.final_result, part_range_reference.value());
            }
        }
        else {
            if (rule_result.accepted) {
                total = part_range_in.combinations();
            }
        }
        return total;
    }

    part2: () = {
        //test_part_range();
        input := load_file(std::format("src/d{}/data.txt", DAY_NUM));
        workflow_array := input.first;

        workflow_map: std::map<std::string, WorkFlow> = ();
        for workflow_array do (workflow) {
            workflow_map[workflow.name] = workflow;
        }

        in_workflow := RulePassResult("in", false);
        all_parts_range := PartRange();
        total := count_accepted_parts(workflow_map&*, in_workflow, all_parts_range);

        writeln(std::format("Part {}: {}", 2, total));
    }

    run: () = {
        writeln(std::format("Day {}", DAY_NUM));
        part1();
        part2();
    }
    // Part1: 332145
    // Part2: 136661579897555
}


