#include "d5-02.h2"

d5: namespace = {

    writeln: (msg: _) = std::cout << "> " << msg << std::endl;


    NumberMapping : @struct type = {
        dest: longlong = 0;
        source: longlong = 0;
        length: longlong = 0;

        constructor: (inout this, dest_in: longlong, source_in: longlong, length_in: longlong) = {
            this.dest = dest_in;
            this.source = source_in;
            this.length = length_in;
        }
        map: (this, in_number: longlong, out out_number: longlong) -> bool = {
            out_number = in_number;
            if (in_number >= this.source && in_number < this.source + this.length) {
                out_number = this.dest + (in_number - this.source);
                return true;
            }
            return false;
        }
        map_and_clamp: (this, in_number: longlong, out out_number: longlong, inout clamped_length: longlong) -> bool = {
            out_number = in_number;
            if (in_number < this.source) {
                clamped_length = std::min(clamped_length, this.source - in_number);
                return false;
            }
            if (in_number >= this.source && in_number < this.source + this.length) {
                out_number = this.dest + (in_number - this.source);
                clamped_length = std::min(clamped_length, this.source + this.length - in_number);
                return true;
            }
            return false;
        }
    }

    load_file: (filename: std::string) -> std::tuple<std::vector<longlong>, std::vector<std::vector<NumberMapping>>> =
    { 
        seeds: std::vector<longlong> = ();
        maps: std::vector<std::vector<NumberMapping>> = ();
        do {
        input_file: std::ifstream = (filename);
        line: std::string = ();
        std::getline(input_file, line);
        assert(line.starts_with("seeds:"));
        line_stream: std::stringstream = (line);
        dest: longlong = 0;
        src: longlong = 0;
        length: longlong = 0;
        scratch: std::string = ();
        std::getline(line_stream, scratch, ':');
        std::ranges::copy(std::istream_iterator<longlong>(line_stream), std::istream_iterator<longlong>(), std::back_inserter(seeds));

        current_map: *std::vector<NumberMapping> = (nullptr);
        while (std::getline(input_file, line)) {
            if (line.ends_with("map:")) {
                current_map = (maps.emplace_back())&;
            }
            else if (!line.empty()) {
                line_stream: std::stringstream = (line);
                line_stream >> dest >> src >> length;
                current_map*.emplace_back(NumberMapping(dest, src, length));
            }
        } } while (false);
        return (seeds, maps);
    }

    part1: () = {
        data := load_file("src/d5/data.txt");
        seeds: std::vector<longlong> = data.get<0>();
        maps: std::vector<std::vector<NumberMapping>> = data.get<1>();

        min: longlong = std::numeric_limits<longlong>::max();
        for seeds do (seed) {
            current := seed;
            for maps do (map) {
                for map do (mapping) {
                    if (mapping.map(current, current&)) {
                        break;
                    }
                }
            }
            //std::cout << seed << " -> " << current << std::endl;
            min = std::min(min, current);
        }

        std::cout << "Part1: " << min << std::endl;
    }

    part2: () = {
        data:= load_file("src/d5/data.txt");
        seeds: std::vector<longlong> = data.get<0>();
        maps: std::vector<std::vector<NumberMapping>> = data.get<1>();

        min: longlong = std::numeric_limits<longlong>::max();
        seed_index: size_t = 0;
        while (seed_index < seeds.size()) {
            seed_start := seeds[seed_index];
            seed_end := seed_start + seeds[seed_index + 1];
            seed := seed_start;
            while (seed < seed_end) {
                range_length: longlong = seed_end - seed;
                current := seed;
                for maps do (map) {
                    for map do (mapping) {
                        if (mapping.map_and_clamp(current, current&, range_length&*)) {
                            break;
                        }
                    }
                }
                min = std::min(min, current);
                seed = seed + range_length;
            }
            seed_index += 2;
        }

        std::cout << "Part2: " << min << std::endl;
    }
        
    run: () = {
        part1();
        part2();
    }
    // Part1: 57075758
    // Part1: 31161857
}


