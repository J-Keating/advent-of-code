#include "d7-c.h2"

d7: namespace = {

    writeln: (msg: _) = std::cout << "> " << msg << std::endl;

    CARD_COUNT: const int = 5;
    VALUE_COUNT: const int = 13;

    HandType: @enum type = {
        HighCard := 0;
        OnePair;
        TwoPairs;
        ThreeOfAKind;
        FullHouse;
        FourOfAKind;
        FiveOfAKind;
    }

    Hand: @struct type = {
        type: HandType = HandType::HighCard;
        cards: std::array<char, 5>;
    }

    Play: @struct type = {
        hand: Hand;
        bid: int;
    }

    get_value_1: (c: char) -> int = {
        if ('2' <= c && c <= '9') {
            return c - '2';
        }
        else if (c == 'T') {
            return 8;
        }
        else if c == 'J' {
            return 9;
        }
        else if c == 'Q' {
            return 10;
        }
        else if c == 'K' {
            return 11;
        }
        else if c == 'A' {
            return 12;
        }
        else {
            assert(false);
        }
        return -1;
    }

    get_value_2: (c: char) -> int = {
        if ('2' <= c && c <= '9') {
            return c - '1';
        }
        else if (c == 'T') {
            return 9;
        }
        else if c == 'J' {
            return 0;
        }
        else if c == 'Q' {
            return 10;
        }
        else if c == 'K' {
            return 11;
        }
        else if c == 'A' {
            return 12;
        }
        else {
            assert(false);
        }
        return -1;
    }    

    analyze_handtype_1: (cards: std::array<char, 5>) -> HandType = {
        value_counts: std::array<int, VALUE_COUNT> = (0);
        for std::views::iota(0, CARD_COUNT) do (i) {
            value_counts[cards[i]] += 1;
        }
        match_counts: std::array<int, 6> = (0);
        for std::views::iota(0, VALUE_COUNT) do (i) {
            match_counts[value_counts[i]] += 1;
        }

        if (match_counts[5] == 1) {
            return HandType::FiveOfAKind;
        }
        else if (match_counts[4] == 1) {
            return HandType::FourOfAKind;
        }
        else if (match_counts[3] == 1) {
            if (match_counts[2] == 1) {
                return HandType::FullHouse;
            }
            return HandType::ThreeOfAKind;
        }
        else if (match_counts[2] == 2) {
            return HandType::TwoPairs;
        }
        else if (match_counts[2] == 1) {
            return HandType::OnePair;
        }
        return HandType::HighCard;
    }

    analyze_handtype_2: (cards: std::array<char, 5>) -> HandType = {
        value_counts: std::array<int, VALUE_COUNT> = (0);
        jack_count: int = 0;
        for std::views::iota(0, CARD_COUNT) do (i) {
            if (cards[i] == 0) {
                jack_count += 1;
            }
            else {
                value_counts[cards[i]] += 1;
            }
        }
        match_counts: std::array<int, 6> = (0);
        for std::views::iota(0, VALUE_COUNT) do (i) {
            match_counts[value_counts[i]] += 1;
        }
        max_match_index: int = 5;
        while (match_counts[max_match_index] == 0) {
            max_match_index -= 1;
        }
        while (jack_count > 0) {
            match_counts[max_match_index] -= 1;
            max_match_index += 1;
            match_counts[max_match_index] += 1;
            jack_count -= 1;
        }

        if (match_counts[5] == 1) {
            return HandType::FiveOfAKind;
        }
        else if (match_counts[4] == 1) {
            return HandType::FourOfAKind;
        }
        else if (match_counts[3] == 1) {
            if (match_counts[2] == 1) {
                return HandType::FullHouse;
            }
            return HandType::ThreeOfAKind;
        }
        else if (match_counts[2] == 2) {
            return HandType::TwoPairs;
        }
        else if (match_counts[2] == 1) {
            return HandType::OnePair;
        }
        return HandType::HighCard;
    }


    load_file: (filename: std::string, part: int) -> std::vector<Play> =
    { 
        ret: std::vector<Play> = ();
        input_file: std::ifstream = (filename);
        input_file.is_open();    // Do nothing but convnce the compiler that this is used
        line: std::string = ();
        while (std::getline(input_file, line)) {
            play: Play = ();
            for std::views::iota(0, CARD_COUNT) do (i) {
                if (part == 1) {
                    play.hand.cards[i] = get_value_1(line[i]);
                }
                else {
                    play.hand.cards[i] = get_value_2(line[i]);
                }
            }
            if (part == 1) {
                play.hand.type = analyze_handtype_1(play.hand.cards);
            }
            else {
                play.hand.type = analyze_handtype_2(play.hand.cards);
            }
            play.bid = std::atoi(line[CARD_COUNT + 1]&);
            ret.push_back(play);
        }
        return ret;
    }

    part1: () = {
        plays := load_file("src/d7/data.txt", 1);
        std::sort(plays.begin(), plays.end(), :(a: Play, b: Play) -> bool = {
            if (a.hand.type == b.hand.type) {
                return a.hand.cards < b.hand.cards;
            }
            return a.hand.type < b.hand.type;
        });
        sum: int = 0;
        i: int = 1;
        for plays do (play) {
            sum += play.bid * i;
            i += 1;
        }
        
        std::cout << "Part1: " << sum << std::endl;
    }

    part2: () = {
        plays := load_file("src/d7/data.txt", 2);
        std::sort(plays.begin(), plays.end(), :(a: Play, b: Play) -> bool = {
            if (a.hand.type == b.hand.type) {
                return a.hand.cards < b.hand.cards;
            }
            return a.hand.type < b.hand.type;
        });
        sum: int = 0;
        i: int = 1;
        for plays do (play) {
            sum += play.bid * i;
            i += 1;
        }
        std::cout << "Part2: " << sum << std::endl;
    }
        
    run: () = {
        part1();
        part2();
    }
    // Part1: 248812215
    // Part1: 5704953
}


